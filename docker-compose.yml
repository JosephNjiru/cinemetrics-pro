# CineMetrics Pro: Docker Compose Configuration
# Dr. Joseph N. Njiru, PhD, M PredAnylt (Data Science), MEd, GD Stat, GC HigherEd, GC-GEOSPI
# Advanced Film Intelligence & Awards Analytics Platform

version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: cinemetrics-mysql
    restart: unless-stopped
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cinemetrics-redis
    restart: unless-stopped
    env_file: .env
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cinemetrics-backend
    restart: unless-stopped
    env_file: .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-5000}
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      TMDB_API_KEY: ${TMDB_API_KEY}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD-SHELL", "node -e 'require(\"http\").get(\"http://localhost:5000/health\", (res) => process.exit(res.statusCode === 200 ? 0 : 1))'"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cinemetrics-frontend
    restart: unless-stopped
    env_file: .env
    environment:
      REACT_APP_API_URL: /api
      REACT_APP_APP_NAME: ${APP_NAME:-CineMetrics Pro}
      REACT_APP_VERSION: ${APP_VERSION:-1.0.0}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 10s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  cinemetrics-network:
    driver: bridge
    name: cinemetrics-pro-network

# Quick Start Instructions:
# 1. Copy environment file: cp .env.example .env
# 2. Update .env with your values (database passwords, API keys, etc.)
# 3. Start services: docker-compose up --build
# 4. Access application: http://localhost
# 5. API documentation: http://localhost/api
# 
# Health checks:
# docker-compose ps
# docker-compose logs [service-name]
# 
# Stop services: docker-compose down
# Remove data: docker-compose down -v
