# CineMetrics Pro: Docker Compose Configuration
# Dr. Joseph N. Njiru, PhD, M PredAnylt (Data Science), MEd, GD Stat, GC HigherEd, GC-GEOSPI
# Advanced Film Intelligence & Awards Analytics Platform

version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: cinemetrics-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: cinemetrics_root_2025
      MYSQL_DATABASE: cinemetrics_pro
      MYSQL_USER: cinemetrics_user
      MYSQL_PASSWORD: cinemetrics_pass_2025
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cinemetrics-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cinemetrics-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: cinemetrics_pro
      DB_USER: cinemetrics_user
      DB_PASSWORD: cinemetrics_pass_2025
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: cinemetrics_jwt_secret_2025_advanced_film_intelligence
      TMDB_API_KEY: your_tmdb_api_key_here
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cinemetrics-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 10s
      retries: 5

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cinemetrics-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_APP_NAME: CineMetrics Pro
      REACT_APP_VERSION: 1.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - cinemetrics-network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Production-ready)
  nginx:
    image: nginx:alpine
    container_name: cinemetrics-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - cinemetrics-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  cinemetrics-network:
    driver: bridge
    name: cinemetrics-pro-network

# Health Check Script
# docker-compose exec backend curl -f http://localhost:5000/health
# docker-compose exec frontend curl -f http://localhost:3000
